import pandas as pd

samples_df=pd.read_table(config["dataset"], dtype=str, index_col="Project_name")
samples_dict=samples_df.to_dict()

def get_charset_file(wildcards):
    return samples_dict["Path"][wildcards.project] + "/" + samples_dict["Charset_file"][wildcards.project] 
def get_supermatrix_file(wildcards):
    return samples_dict["Path"][wildcards.project] + "/" + samples_dict["Supermatrix_file"][wildcards.project] 

rule all:
    input:
        expand("results/{project}/get_ML_results_{repnumber}_{project}.done", project=list(samples_df.index), repnumber=list(range(1,int(config["ML_trees"])+1))),
        #expand("results/{project}/bootstrap/BS_500_{project}.boottrees", project=list(samples_df.index)),
        expand("results/{project}/tree_SH_aLRT_aBayes/Best_SH_aLRT_aBayes_{project}.treefile", project=list(samples_df.index)),
        expand("results/{project}/tree_BS/tree_BS_{project}.suptree", project=list(samples_df.index))

rule charset_to_nexus:
    input:
        charset=get_charset_file
    output:
        charset_nex="results/{project}/charset_{project}.nex"
    params:
        out_dir="results/{project}"
    log:
        "results/{project}/logs/"
    shell:
        "(cp {input.charset} {params.out_dir}/charset_{wildcards.project}.txt; "
        "awk '{{gsub(\"charset\",\"        charset\");print}}' {params.out_dir}/charset_{wildcards.project}.txt > {output.charset_nex}; "
        "sed -i \'1s/^/#nexus\\nbegin sets;\\n/\' {output.charset_nex}; "
        "echo \"end;\" >> {output.charset_nex}; "
        "rm {params.out_dir}/charset_{wildcards.project}.txt; "
        "echo {output.charset_nex} DONE) &> {log}"

rule modelfinder:
    input: 
        charset_nex="results/{project}/charset_{project}.nex",
        supermatrix=get_supermatrix_file
    output:
        best_scheme_nex="results/{project}/modelfinder/BestModels_aa_{project}.best_scheme.nex"
    params:
        abspath_modelfinder="results/{project}/modelfinder",
        logpath="results/{project}/logs/"
    conda: 
        "envs/env_iqtree.yaml"
    threads: workflow.cores * 0.4  
    shell:
        "mkdir -p {params.abspath_modelfinder}; iqtree -s {input.supermatrix} -st AA -spp {input.charset_nex} -pre {params.abspath_modelfinder}/BestModels_aa_{wildcards.project} "
        "-nt {threads} -m MF -msub nuclear -mrate E,I,G,I+G,R -cmin 2 -cmax 15 -madd LG4X,LG4M -safe -merit AICc; "
        "cp {params.abspath_modelfinder}/BestModels_aa_{wildcards.project}.log {params.logpath}"

rule ML_p:
    input:
        best_scheme_nex="results/{project}/modelfinder/BestModels_aa_{project}.best_scheme.nex",
        supermatrix=get_supermatrix_file
    output:
        ML_p_log="results/{project}/ML_p/ML_p_{repnumber}_{project}.log",
        ML_p_treefile="results/{project}/ML_p/ML_p_{repnumber}_{project}.treefile"
    params: 
        abspath_ML_p="results/{project}/ML_p",
        logpath="results/{project}/logs/"
    conda: 
        "envs/env_iqtree.yaml"
    threads: workflow.cores * 0.3  
    shell:
        "mkdir -p {params.abspath_ML_p}; iqtree -s {input.supermatrix} -st AA -spp {input.best_scheme_nex} "
        "-pre {params.abspath_ML_p}/ML_p_{wildcards.repnumber}_{wildcards.project} -nt {threads} -gmedian -safe; "
        "cp {params.abspath_ML_p}/ML_p_{wildcards.repnumber}_{wildcards.project}.log {params.logpath}"

rule ML_r:
    input:
        best_scheme_nex="results/{project}/modelfinder/BestModels_aa_{project}.best_scheme.nex",
        supermatrix=get_supermatrix_file
    output:
        ML_r_log="results/{project}/ML_r/ML_r_{repnumber}_{project}.log",
        ML_r_treefile="results/{project}/ML_r/ML_r_{repnumber}_{project}.treefile"
    params: 
        abspath_ML_r="results/{project}/ML_r",
        logpath="results/{project}/logs/"
    conda: 
        "envs/env_iqtree.yaml"
    threads: workflow.cores * 0.3  
    shell:
        "mkdir -p {params.abspath_ML_r}; iqtree -s {input.supermatrix} -st AA -spp {input.best_scheme_nex} "
        "-pre {params.abspath_ML_r}/ML_r_{wildcards.repnumber}_{wildcards.project} -nt {threads}  -gmedian -t RANDOM -safe; "
        "cp {params.abspath_ML_r}/ML_r_{wildcards.repnumber}_{wildcards.project}.log {params.logpath}"

rule get_ML_results:
    input:
        ML_r_log="results/{project}/ML_r/ML_r_{repnumber}_{project}.log",
        ML_p_log="results/{project}/ML_p/ML_p_{repnumber}_{project}.log"
    output:
        touch("results/{project}/get_ML_results_{repnumber}_{project}.done")
    params:
        ML_results_table="results/{project}/table_ML_{project}.txt",
        ML_r_filename="ML_r_{repnumber}_{project}.treefile",
        ML_p_filename="ML_p_{repnumber}_{project}.treefile"
    shell:
        "touch {params.ML_results_table}; "
        "echo -n {params.ML_r_filename} >> {params.ML_results_table}; "
        "echo -n -e \"\\t\" >> {params.ML_results_table}; grep \"BEST SCORE FOUND\" {input.ML_r_log} | cut -d \":\" -f2 | sed \"s/ //\" | xargs echo >> {params.ML_results_table}; "
        "echo -n {params.ML_p_filename} >> {params.ML_results_table}; "
        "echo -n -e \"\\t\" >> {params.ML_results_table}; grep \"BEST SCORE FOUND\" {input.ML_p_log} | cut -d \":\" -f2 | sed \"s/ //\" | xargs echo >> {params.ML_results_table}"

rule find_best_ML_tree:
    input:
        expand("results/{project}/get_ML_results_{repnumber}_{project}.done", project=list(samples_df.index), repnumber=list(range(1,int(config["ML_trees"])+1)))
    output:
        ML_results_sort_table="results/{project}/sort_table_ML_{project}.txt"
    params:
        ML_results_table="results/{project}/table_ML_{project}.txt"
    log:
        "results/{project}/logs/"
    shell:
        "(ls {input}; sort -k2 {params.ML_results_table} > {output.ML_results_sort_table}; "
        "echo sorted {params.ML_results_table}; echo {output.ML_results_sort_table} DONE) &> {log}"     

rule bootstrap:
    input:
        best_scheme_nex="results/{project}/modelfinder/BestModels_aa_{project}.best_scheme.nex",
        supermatrix=get_supermatrix_file
    output:
        BS_boottrees="results/{project}/bootstrap/BS_500_{project}.boottrees"
    params: 
        abspath_bootstrap="results/{project}/bootstrap",
        logpath="results/{project}/logs/"
    conda: 
        "envs/env_iqtree.yaml"
    threads: workflow.cores * 0.4 
    shell:
        "mkdir -p {params.abspath_bootstrap}; iqtree -s {input.supermatrix} -st AA -spp {input.best_scheme_nex} "
        "-pre {params.abspath_bootstrap}/BS_500_{wildcards.project} -nt {threads} -gmedian -t RANDOM -bo 500 -safe; "
        "cp {params.abspath_bootstrap}/BS_500_{wildcards.project}.log {params.logpath}"

rule SH_aLRT_aBayes:
    input:
        best_scheme_nex="results/{project}/modelfinder/BestModels_aa_{project}.best_scheme.nex",
        supermatrix=get_supermatrix_file,
        ML_results_sort_table="results/{project}/sort_table_ML_{project}.txt"        
    output:
        SH_aLRT_aBayes_treefile="results/{project}/tree_SH_aLRT_aBayes/Best_SH_aLRT_aBayes_{project}.treefile"
    params:
        abspath_SH_aLRT_aBayes="results/{project}/tree_SH_aLRT_aBayes",
        logpath="results/{project}/logs/"
    conda: 
        "envs/env_iqtree.yaml"
    threads: workflow.cores * 0.3 
    shell:
        "bestml=$(head -n1 {input.ML_results_sort_table} | cut -f1); "
        "mkdir -p {params.abspath_SH_aLRT_aBayes}; "
        "iqtree -s {input.supermatrix} -st AA -spp {input.best_scheme_nex} "
        "-pre {params.abspath_SH_aLRT_aBayes}/Best_SH_aLRT_aBayes_{wildcards.project}  "
        "-nt {threads} -gmedian alrt 10000 -abayes "
        "-te results/{wildcards.project}/ML_*/\"$bestml\" -safe; "
        "cp {params.abspath_SH_aLRT_aBayes}/Best_SH_aLRT_aBayes_{wildcards.project}.log {params.logpath}"

rule tree_BS:
    input:
        BS_boottrees="results/{project}/bootstrap/BS_500_{project}.boottrees",
        ML_results_sort_table="results/{project}/sort_table_ML_{project}.txt"
    output:
        BS_suptree="results/{project}/tree_BS/tree_BS_{project}.suptree"
    params:
        abspath_tree_BS="results/{project}/tree_BS",
        logpath="results/{project}/logs/"
    conda: 
        "envs/env_iqtree.yaml"
    threads: workflow.cores * 0.1 
    shell:
        "bestml=$(head -n1 {input.ML_results_sort_table} | cut -f1); "
        "mkdir -p {params.abspath_tree_BS}; "
        "iqtree -sup results/{wildcards.project}/ML_*/\"$bestml\" "
        "-t {input.BS_boottrees} -pre {params.abspath_tree_BS}/tree_BS_{wildcards.project} -nt {threads}; "
        "cp {params.abspath_tree_BS}/tree_BS_{wildcards.project}.log {params.logpath}"

#onsuccess:
    #shell("mkdir -p ")


#rule summarize_results:



